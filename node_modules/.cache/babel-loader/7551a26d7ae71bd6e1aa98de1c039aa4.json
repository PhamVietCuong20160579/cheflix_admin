{"ast":null,"code":"// in src/authProvider.js\nexport default {\n  // called when the user attempts to log in\n  login: ({\n    username,\n    password\n  }) => {\n    const request = new Request('https://127.0.0.1/admin//tokens', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    });\n    return fetch(request).then(response => {\n      if (response.status < 200 || response.status >= 300) {\n        throw new Error(response.statusText);\n      }\n\n      return response.json();\n    }).then(({\n      token\n    }) => {\n      localStorage.setItem('token', token);\n    });\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    localStorage.removeItem('username');\n    return Promise.resolve();\n  },\n  // called when the API returns an error\n  checkError: ({\n    status\n  }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    return localStorage.getItem('username') ? Promise.resolve() : Promise.reject();\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve()\n};","map":{"version":3,"sources":["/home/vp1927/study/ITSS4/cheflix_admin/src/authProvider.js"],"names":["login","username","password","request","Request","method","body","JSON","stringify","headers","Headers","fetch","then","response","status","Error","statusText","json","token","localStorage","setItem","logout","removeItem","Promise","resolve","checkError","reject","checkAuth","getItem","getPermissions"],"mappings":"AAAA;AACA,eAAe;AACX;AACAA,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA6B;AAChC,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,iCAAZ,EAA+C;AAC3DC,MAAAA,MAAM,EAAE,MADmD;AAE3DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf,CAFqD;AAG3DO,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,wBAAgB;AAAlB,OAAZ;AAHkD,KAA/C,CAAhB;AAKA,WAAOC,KAAK,CAACR,OAAD,CAAL,CACFS,IADE,CACGC,QAAQ,IAAI;AACd,UAAIA,QAAQ,CAACC,MAAT,GAAkB,GAAlB,IAAyBD,QAAQ,CAACC,MAAT,IAAmB,GAAhD,EAAqD;AACjD,cAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,UAAnB,CAAN;AACH;;AACD,aAAOH,QAAQ,CAACI,IAAT,EAAP;AACH,KANE,EAOFL,IAPE,CAOG,CAAC;AAAEM,MAAAA;AAAF,KAAD,KAAe;AACjBC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AACH,KATE,CAAP;AAUH,GAlBU;AAmBX;AACAG,EAAAA,MAAM,EAAE,MAAM;AACVF,IAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GAvBU;AAwBX;AACAC,EAAAA,UAAU,EAAE,CAAC;AAAEX,IAAAA;AAAF,GAAD,KAAgB;AACxB,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCK,MAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACA,aAAOC,OAAO,CAACG,MAAR,EAAP;AACH;;AACD,WAAOH,OAAO,CAACC,OAAR,EAAP;AACH,GA/BU;AAgCX;AACAG,EAAAA,SAAS,EAAE,MAAM;AACb,WAAOR,YAAY,CAACS,OAAb,CAAqB,UAArB,IACDL,OAAO,CAACC,OAAR,EADC,GAEDD,OAAO,CAACG,MAAR,EAFN;AAGH,GArCU;AAsCX;AACAG,EAAAA,cAAc,EAAE,MAAMN,OAAO,CAACC,OAAR;AAvCX,CAAf","sourcesContent":["// in src/authProvider.js\nexport default {\n    // called when the user attempts to log in\n    login: ({ username, password }) =>  {\n        const request = new Request('https://127.0.0.1/admin//tokens', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        });\n        return fetch(request)\n            .then(response => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(({ token }) => {\n                localStorage.setItem('token', token);\n            });\n    },\n    // called when the user clicks on the logout button\n    logout: () => {\n        localStorage.removeItem('username');\n        return Promise.resolve();\n    },\n    // called when the API returns an error\n    checkError: ({ status }) => {\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('username');\n            return Promise.reject();\n        }\n        return Promise.resolve();\n    },\n    // called when the user navigates to a new location, to check for authentication\n    checkAuth: () => {\n        return localStorage.getItem('username')\n            ? Promise.resolve()\n            : Promise.reject();\n    },\n    // called when the user navigates to a new location, to check for permissions / roles\n    getPermissions: () => Promise.resolve(),\n};\n"]},"metadata":{},"sourceType":"module"}